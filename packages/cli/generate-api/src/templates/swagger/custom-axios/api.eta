<%
const { utils, route, config, modelTypes, myConfig } = it;
const { instancePath } = myConfig;
const { _, pascalCase, require } = utils;

const apiClassName = pascalCase(route.moduleName) + 'Api';
const routes = route.routes;

const dataContracts = _.map(modelTypes, "name");
const instanceName = route.moduleName + 'Api';

%>

<% if(route.moduleName !== 'health') { %> <% /* health check 제외*/ %>

<% if (config.httpClientType === config.constants.HTTP_CLIENT.AXIOS) { %> 
import { AxiosError } from "axios"; 
<% } %>

import { <%=instanceName%> } from './<%=pascalCase(route.moduleName)%>.api';

import instance from "<%~ instancePath%>";
import { HttpClient, RequestParams, ContentType, HttpResponse } from "../@<%~ config.fileNames.httpClient %>";
<% if (dataContracts.length) { %>
import type { <%~ dataContracts.join(", ") %> } from "../@types"
<% } %>

export class <%= apiClassName %><SecurityDataType=unknown><% if (!config.singleHttpClient) { %> extends HttpClient<SecurityDataType> <% } %> {
    <% if(config.singleHttpClient) { %>
    http: HttpClient<SecurityDataType>;

      constructor (http: HttpClient<SecurityDataType>) {
        this.http = http;
        }
        <% } %>

        <% routes.forEach((route) => { %>
        <%~ includeFile('./procedure-call.ejs', { ...it, route }) %>
        <% }) %>
        }

export const <%= instanceName %> = new <%= apiClassName %>({ adapter: instance.defaults.adapter });

<% }%>